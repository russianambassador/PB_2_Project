DATE: 18th of February
LOG: Decided upon the project. Initialised the project repository. Started 
covering React Tutorial on Freecodecamp to grasp the basics of the framework. 
Have researched the folder structure of projects done using MERN Stack and have 
created initial folder structure for the project. In addition, have communicated 
with the other project contirbutor in regards to the project to discuss the idea.
It has been decided to reproduce an brief webapp flowchart to assist the production
process. 
DATE: 22th of February
LOG: After learning together how to build application flow-charts, me and another 
project collaborator, we have designed a user experience flowchart using
Lucidchart software. It also very clearly shows the client-side website structure
which will prove to be useful later during the production process. 
So far I am still covering Freecodecamp course and building beginner projects. 
I have grasped a solid understanding of routing and redirects, which will 
be very applicable when designing social media application, as exactly how
flowchart shows, many redirects and routing will be necessary. 
DATE: 23rd of February
LOG: Learned how to build designs with figma software. Built a design of profile page
DATE: 4th of March
LOG: Dived deeper into MongoDB and database schemas using mongoose. Continued to learn React. Built 2 sample projcts to 
practice skills I have learned. Soon will start building profile page in our project.
DATE: 6th of March
LOG: Created a final practice project using react and pushed it to my github - https://github.com/russianambassador/restaurant_review_webapp
Now I will start doing the main project as I think I have learned enough of basics and the rest I will learn on the go. 
DATE: 7th of March
LOG: Initialised server side. created package.json with required modules. Created initial routes/controllers, added dotenv and mongoose model for new users. created auth controller to add new users to cloud mongodb database. used bcrypt to has passwords for security. used helmet npm to protect http requests
Added user update route. now user data updates with a put request. Dummy validation added to check if the user is the one logged in - needs editing. need to add additional validation routes when changing email/password. ollow/unfollow routes added. some validation added so user can't follow unfollow himself.Tried to make as robust as possible.
DATE: 7th of March
LOG: Removed follow/unfollow system. Added friends and friend requests system. Did some validation when sending requests to be friends so user can't send an invite again, or send an invite to a user he is not friends with. Added routes to block/unblock users. Edited user db schema to contain a list of blocked users. If user was blocked, you can't send him a friends request and neither he can send one to you. May be it is worth to add an ability to stay followed on a user even if you block him - to track his updates, but so he cant track yours.
DATE: 10th of March
LOG: Added a lot of stuff...Added secure access to page using http-only cookies stored in the client's browser. Added dbs error-handler. edited the responses from the server so they are less redundat and are either to process on the frontend. TODO's: add hashing software to secure http requests by setting out CSPs. Add notifications subdocuemnts to User schema and allow notifications to be shown to users. Add 'People you may know' functionality. Try to optimize perfomance by reducing unneccessary fetch requests to the database. Work through error handling to make sure error messages are more helpful. Added profile page. Added feed. Added custom svg icons. Added login and registration page. Currently working at making website responsive -> building a nice pop-up menu-sidebar.
DATE: 31 of March
LOG: Added profile page. Added feed. Added custom svg icons. Added login and registration page. Currently working at making website responsive -> building a nice pop-up menu-sidebar.